STL과 함수 인자

int/int배열/구조체를 함수에 넣었을 때 원본이 바뀌는지 묻는 문제
int는 원본 값을 넘겨주는 것
int배열은 주소를 넘겨주는 것
구조체는 값이 다 복사되기에 원본에는 영향을 주지 않음

참조자(Reference)
&기호

STL(Standard Template Library)-vector
- 필요한 자료를 직접 구현할 필요 없이 가져다 쓰면 되는 라이브러리
- vector STL은 배열과 비슷함
- vector는 가변 배열
- STL도 구조체와 비슷하게 함수 인자로 사용하면 복사본으로 보내서 원본은 변하지 않음
- STL을 복사하는 것도 시간복잡도임
- 따라서, &(참조자)를 사용하면 원본에 접근하기에 전체 복사를 할 필요가 없음

표준 입출력
- cin/cout
- scanf/printf
- getline 함수를 사용(type이 C++ String이어야 함)
- cin/cout은 입출력으로 인한 시간초과를 막기 위해서
-- ios::sync_with_stdio(0), cin.tie(0)
-- C++ Stream과 C Stream을 동기화 하고 있음, 근데 C++ Stream만 사용할거면 의미가 없다
-- 동기화를 끊는 것이 sync_with_stdio(0) 혹은 sync_with_stdio(false)임
-- 단, sync_with_stdio(0)을 사용하면 scanf/printf는 사용하면 안됨
-- 버퍼?
-- 출력 버퍼라는 곳에 임시로 저장되었다가 버퍼가 비워지면서 콘솔에 보여짐
-- 입력 버퍼도 존재, 바로 보내지 않고 저장되었다가(모아서) 보냄
-- 즉, 버퍼때문에 입,출력 순서가 꼬일 수 있음
-- 이러한 현상을 막기 위해 cin 명령을 수행하기 전 cout버퍼를 비움
-- 채점사이트는 출력만 검사하기에 버퍼 비우는 것이 의미없음
-- cin 명령을 수행하기 전에 cout버퍼를 비우지 않도록 하는 명령어가 cin.tie(nullptr)
-- cin.tie(0)으로 간략하게 사용
-- endl은 절대 사용하면 안됨, 왜냐하면 개행(\n)과 버퍼를 비우는 것을 동시에 수행하기에

코드 작성 팁
- 코딩테스트와 개발은 다르다
- 디버거는 굳이 사용하지 않아도 된다(권장)
